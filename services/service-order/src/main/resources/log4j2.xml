<?xml version="1.0" encoding="UTF-8"?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,你会看到log4j2内部各种详细输出-->
<!--monitorInterval: Log4j能够自动检测修改配置 文件和重新配置本身,设置间隔秒数-->
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--
根节点 Configuration属性
    status：用来指定 log4j 本身的打印日志的级别
    monitorinterval：用来指定 log4j 自动重新配置的监测间隔时间，单位：s，最小是 5s
-->
<Configuration monitorInterval="1800" status="WARN">
    <!-- 自己设置属性,后面通过${}来访问 -->
    <properties>
        <!--日志存放目录-->
        <property name="LOG_HOME">./log4j2-logs</property>
        <!--日志名称-->
        <property name="LOG_NAME">order-server</property>
        <!--日志格式-文件-->
        <!--
        pattern：指定日志格式
        %d{yyyy-MM-dd HH:mm:ss, SSS}: 日志生产时间，输出到毫秒的时间
        %-5level: 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
        %p: 日志输出格式
        %c: logger的名称(%logger)
        %m : 日志内容, 即 logger.info("message")
        %n: 换行符
        %C: Java类名(%F)
        %L: 日志输出所在行数
        %M: 日志输出所在方法名
        %l: 输出语句所在的行数, 包括类名、方法名、文件名、行数
        %t: 表示线程名(%thread)
        hostName: 本地机器名
        hostAddress: 本地ip地址
        -->
        <property name="LOG_FORMAT">[%d{yyyy-MM-dd HH:mm:ss.SSS}] %p %t %c[%L] - %m %n</property>
        <!--日志格式-控制台-->
        <property name="LOG_FORMAT_CONSOLE">%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight{%-5level} [%t] %highlight{%c{1.}.%M(%L)}: %msg%n%throwable</property>
        <!--备份目录- 根据年月建立文件夹 -->
        <property name="BACKUP_HOME">${LOG_HOME}/$${date:yyyy-MM}</property>
        <!--备份频率-->
        <property name="BACK_HZ">%d{yyyy-MM-dd}</property>
        <!--日志编码-->
        <property name="CHARSET" value="utf-8"/>
    </properties>

    <Appenders>
        <!--控制台日志-->
        <Console name="console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="${LOG_FORMAT_CONSOLE}"
                           disableAnsi="false"
                           noConsoleNoAnsi="false"
                           charset ="${CHARSET}"/>
            <!--控制台只输出level及其以上级别的信息（onMatch）,其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
        </Console>

        <!--文件会打印出所有信息,这个log每次运行程序会自动清空,由append属性决定,适合临时测试用-->
        <File name="fileLog" fileName="${LOG_HOME}/${LOG_NAME}/test.log" append="false">
            <PatternLayout pattern="${LOG_FORMAT}"/>
        </File>

        <!-- AsyncAppender引用appender 来异步 -->
        <Async name="AsyncFileLog">
            <AppenderRef ref="fileLog"/>
        </Async>

        <!-- 这个会打印出所有的info及以下级别的信息,每次大小超过size,则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩,作为存档-->
        <RollingRandomAccessFile name="infoLog"
                                 fileName="${LOG_HOME}/${LOG_NAME}/info.log"
                                 filePattern="${LOG_HOME}/${LOG_NAME}/${LOG_NAME}-info-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch）,其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_FORMAT}" charset="${CHARSET}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次,默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <!--或者日志达到10MB 滚动一次-->
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置,则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="15">
                <Delete basePath="${LOG_HOME}/${LOG_NAME}" maxDepth="2">
                    <IfFileName glob="*-info.*.log.gz"/>
                    <IfLastModified age="P1D"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>

        <!-- 这个会打印出所有的warn及以下级别的信息,每次大小超过size,则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩,作为存档-->
        <RollingRandomAccessFile name="warnLog"
                                 fileName="${LOG_HOME}/${LOG_NAME}/warn.log"
                                 filePattern="${LOG_HOME}/${LOG_NAME}/${LOG_NAME}-warn-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch）,其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_FORMAT}" charset="${CHARSET}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次,默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置,则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="15">
                <Delete basePath="${LOG_HOME}/${LOG_NAME}" maxDepth="2">
                    <IfFileName glob="*-warn.*.log.gz"/>
                    <IfLastModified age="P1D"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>

        <!-- 这个会打印出所有的error及以下级别的信息,每次大小超过size,则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩,作为存档-->
        <RollingRandomAccessFile name="errorLog"
                                 fileName="${LOG_HOME}/${LOG_NAME}/error.log"
                                 filePattern="{LOG_HOME}/${LOG_NAME}/${LOG_NAME}-error-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch）,其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_FORMAT}" charset="${CHARSET}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次,默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置,则默认为最多同一文件夹下15个文件开始覆盖-->
            <DefaultRolloverStrategy max="15">
                <Delete basePath="${LOG_HOME}/${LOG_NAME}" maxDepth="2">
                    <IfFileName glob="*-error.*.log.gz"/>
                    <IfLastModified age="P1D"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>

    </Appenders>

    <!--Logger节点用来单独指定日志的形式,比如要为指定包下的class指定不同的日志级别等。-->
    <!--然后定义loggers,只有定义了logger并引入的appender,appender才会生效-->
    <!--
    Log4j2提供了三种异步日志实现方法：
       全局异步AsyncLogger(推荐使用)、
       混合异步AsyncLogger(推荐使用)、
       AsyncAppender。
    -->
    <Loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <Logger name="org.mybatis" level="info" additivity="false">
            <AppenderRef ref="console"/>
        </Logger>
        <!--监控系统信息-->
        <!--若是additivity设为false,则子Logger 只会在自己的appender里输出,而不会在父Logger 的appender里输出。-->
        <!-- 自定义异步logger对象, name必须是LoggerFactory.getLogger(Log4j2Test.class)对应 -->
        <!-- 如果设置includeLocation=true, 开启日志记录行号信息会急剧降低异步日志的性能，比同步日志还要慢 -->
        <!-- 这里设置includeLocation=false，则PatternLayout的%l将不会打印出来 -->
        <!-- additivity="false": 不再继承RootLogger对象. 这里建议强制设置成false -->
        <Logger name="org.springframework" level="info" additivity="false">
            <AppenderRef ref="console"/>
        </Logger>

        <!--混合使用异步输出-->
        <AsyncLogger name="asyncConsole" level="INFO" includeLocation="false" additivity="false">
            <AppenderRef ref="console"/>
        </AsyncLogger>

        <Logger name="com.alibaba.nacos.shaded.io.grpc" level="DEBUG">
            <AppenderRef ref="console"/>
        </Logger>


        <!-- RootLogger是同步的。除asyncConsole和直接引用AsyncAppender外，其它名称的logger使用RootLogger进行输出 -->
        <Root level="INFO">
            <!-- 输出到控制台-->
            <Appender-ref ref="console"/>
            <!-- 输出到文件 直接引用AsyncAppender -->
            <Apender-ref ref="AsyncFileLog"/>
            <Appender-ref ref="infoLog"/>
            <Appender-ref ref="warnLog"/>
            <Appender-ref ref="errorLog"/>
        </Root>
    </Loggers>

</Configuration>
